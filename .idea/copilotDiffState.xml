<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/client_apis/vfl_java/src/main/java/dev/kuku/vfl/core/fluent_api/FluentVFLCallable.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client_apis/vfl_java/src/main/java/dev/kuku/vfl/core/fluent_api/FluentVFLCallable.java" />
              <option name="originalContent" value="package dev.kuku.vfl.core.fluent_api;&#10;&#10;import dev.kuku.vfl.core.models.VFLExecutionException;&#10;import dev.kuku.vfl.core.vfl_abstracts.VFLCallable;&#10;&#10;import java.util.concurrent.Callable;&#10;import java.util.concurrent.CompletableFuture;&#10;import java.util.concurrent.Executor;&#10;import java.util.function.Function;&#10;&#10;public class FluentVFLCallable extends FluentVFL {&#10;    private final VFLCallable vfl;&#10;&#10;    public FluentVFLCallable(VFLCallable logger) {&#10;        super(logger);&#10;        this.vfl = logger;&#10;    }&#10;&#10;    public StartBlockStep startSubBlock(String blockName) {&#10;        return new StartBlockStep(blockName);&#10;    }&#10;&#10;    public class StartBlockStep {&#10;        private final String blockName;&#10;        private String startMessage = null;&#10;&#10;        public StartBlockStep(String blockName) {&#10;            this.blockName = blockName;&#10;        }&#10;&#10;        public StartBlockStep withStartMessage(String startMessage) {&#10;            this.startMessage = startMessage;&#10;            return this;&#10;        }&#10;&#10;        public &lt;R&gt; FnStep&lt;R&gt; forCallable(Callable&lt;R&gt; callable) {&#10;            return new FnStep&lt;&gt;(callable);&#10;        }&#10;&#10;        public FnVoidStep forRunnable(Runnable runnable) {&#10;            return new FnVoidStep(runnable);&#10;        }&#10;&#10;        public class FnStep&lt;R&gt; {&#10;            private final Callable&lt;R&gt; callable;&#10;            private Function&lt;R, String&gt; endMessageSerializer = null;&#10;&#10;            public FnStep(Callable&lt;R&gt; callable) {&#10;                this.callable = callable;&#10;            }&#10;&#10;            public FnStep&lt;R&gt; withEndMessageSerializer(Function&lt;R, String&gt; endMessageSerializer) {&#10;                this.endMessageSerializer = endMessageSerializer;&#10;                return this;&#10;            }&#10;&#10;            public R executeAsPrimary() {&#10;                return vfl.callPrimarySubBlock(blockName, startMessage, callable, endMessageSerializer);&#10;            }&#10;&#10;            public CompletableFuture&lt;R&gt; executeAsJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryJoiningBlock(blockName, startMessage, callable, endMessageSerializer, executor);&#10;            }&#10;&#10;            public CompletableFuture&lt;Void&gt; executeAsNonJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryNonJoiningBlock(blockName, startMessage, () -&gt; {&#10;                    try {&#10;                        callable.call();&#10;                    } catch (Exception e) {&#10;                        throw new VFLExecutionException(e);&#10;                    }&#10;                }, executor);&#10;            }&#10;        }&#10;&#10;        public class FnVoidStep {&#10;            private final Runnable runnable;&#10;&#10;            public FnVoidStep(Runnable runnable) {&#10;                this.runnable = runnable;&#10;            }&#10;&#10;            private Callable&lt;Void&gt; toCallable() {&#10;                return () -&gt; {&#10;                    runnable.run();&#10;                    return null;&#10;                };&#10;            }&#10;&#10;            public void executeAsPrimary() {&#10;                vfl.callPrimarySubBlock(blockName, startMessage, toCallable(), null);&#10;            }&#10;&#10;            public CompletableFuture&lt;Void&gt; executeAsJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryJoiningBlock(blockName, startMessage, toCallable(), null, executor);&#10;            }&#10;&#10;            public CompletableFuture&lt;Void&gt; executeAsNonJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryNonJoiningBlock(blockName, startMessage, runnable, executor);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dev.kuku.vfl.core.fluent_api;&#10;&#10;import dev.kuku.vfl.core.models.VFLExecutionException;&#10;import dev.kuku.vfl.core.vfl_abstracts.VFLCallable;&#10;&#10;import java.util.concurrent.Callable;&#10;import java.util.concurrent.CompletableFuture;&#10;import java.util.concurrent.Executor;&#10;import java.util.function.Function;&#10;&#10;public class FluentVFLCallable extends FluentVFL {&#10;    private final VFLCallable vfl;&#10;&#10;    public FluentVFLCallable(VFLCallable logger) {&#10;        super(logger);&#10;        this.vfl = logger;&#10;    }&#10;&#10;    public StartBlockStep startSubBlock(String blockName) {&#10;        return new StartBlockStep(blockName);&#10;    }&#10;&#10;    public class StartBlockStep {&#10;        private final String blockName;&#10;        private String startMessage = null;&#10;&#10;        public StartBlockStep(String blockName) {&#10;            this.blockName = blockName;&#10;        }&#10;&#10;        public StartBlockStep withStartMessage(String startMessage) {&#10;            this.startMessage = startMessage;&#10;            return this;&#10;        }&#10;&#10;        public &lt;R&gt; FnStep&lt;R&gt; forCallable(Callable&lt;R&gt; callable) {&#10;            return new FnStep&lt;&gt;(callable);&#10;        }&#10;&#10;        public FnVoidStep forRunnable(Runnable runnable) {&#10;            return new FnVoidStep(runnable);&#10;        }&#10;&#10;        public class FnStep&lt;R&gt; {&#10;            private final Callable&lt;R&gt; callable;&#10;            private Function&lt;R, String&gt; endMessageSerializer = null;&#10;&#10;            public FnStep(Callable&lt;R&gt; callable) {&#10;                this.callable = callable;&#10;            }&#10;&#10;            public FnStep&lt;R&gt; withEndMessageSerializer(Function&lt;R, String&gt; endMessageSerializer) {&#10;                this.endMessageSerializer = endMessageSerializer;&#10;                return this;&#10;            }&#10;&#10;            public R executeAsPrimary() {&#10;                return vfl.callPrimarySubBlock(blockName, startMessage, callable, endMessageSerializer);&#10;            }&#10;&#10;            public CompletableFuture&lt;R&gt; executeAsJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryJoiningBlock(blockName, startMessage, callable, endMessageSerializer, executor);&#10;            }&#10;&#10;            public CompletableFuture&lt;Void&gt; executeAsNonJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryNonJoiningBlock(blockName, startMessage, () -&gt; {&#10;                    try {&#10;                        callable.call();&#10;                    } catch (Exception e) {&#10;                        throw new VFLExecutionException(e);&#10;                    }&#10;                }, executor);&#10;            }&#10;        }&#10;&#10;        public class FnVoidStep {&#10;            private final Runnable runnable;&#10;&#10;            public FnVoidStep(Runnable runnable) {&#10;                this.runnable = runnable;&#10;            }&#10;&#10;            private Callable&lt;Void&gt; toCallable() {&#10;                return () -&gt; {&#10;                    runnable.run();&#10;                    return null;&#10;                };&#10;            }&#10;&#10;            public void executeAsPrimary() {&#10;                vfl.callPrimarySubBlock(blockName, startMessage, toCallable(), null);&#10;            }&#10;&#10;            public CompletableFuture&lt;Void&gt; executeAsJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryJoiningBlock(blockName, startMessage, toCallable(), null, executor);&#10;            }&#10;&#10;            public CompletableFuture&lt;Void&gt; executeAsNonJoiningSecondary(Executor executor) {&#10;                return vfl.callSecondaryNonJoiningBlock(blockName, startMessage, runnable, executor);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>